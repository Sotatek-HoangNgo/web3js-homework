import type { NextPage } from "next";
import { ethers } from "ethers";
import Head from "next/head";
import { useEffect, useState } from "react";
import {
	Connector,
	useAccount,
	useConnect,
	useContract,
	useContractReads,
	useDisconnect,
	useNetwork,
	useProvider,
} from "wagmi";

import {
	getBlockNumber,
	getAccountBallances,
	handlerTransferEventOnLast100Blocks,
	getTokenSymbol,
	getWalletsBalances,
	walletAddresses,
} from "~/utils/contract";
import useSubcribeTransferData from "~/hooks/useSubcribeTransferData";
import TransferDataList from "~/components/TransferDataList/TransferDataList";

import ExchangeInput from "~/components/ExchangeInput";
import { depositETH, withdrawETH } from "~/utils/exchange";
import WeiToETHConverted, { numberFormater } from "~/utils/WeiToETHConverted";
import WalletsBalance from "~/components/WalletsBalance";

import styles from "../styles/Home.module.css";
import BrowserOnly from "~/components/shared/BrowserOnly";
import Authentication from "~/components/Login";
import rinkebyABI from "~/abi/rinkebyABI.json";

const walletContractList = walletAddresses.map((walletAddress) => {
	return {
		addressOrName: process.env.NEXT_PUBLIC_CONTRACT_ADDRESS || "",
		contractInterface: rinkebyABI,
		functionName: "balanceOf",
		args: [walletAddress],
	};
});

const Home: NextPage = () => {
	// const { address: account } = useAccount();

	const { chains, chain } = useNetwork();
	const { disconnect } = useDisconnect();
	// const { connect, connectors } = useConnect({ connector: new InjectedConnector() });
	// const {} = useContractReads()
	// const contract = useContract({})
	const provider = useProvider();
	const [account, setAccount] = useState("");
	const [showConnectModal, setShowConnectModal] = useState(false);
	const [isSignedMessage, setIsSignMessage] = useState(false);
	const [userWalletBalance, setUserWalletBalance] = useState("0");
	const [walletBalance, setWalletBalance] = useState("0");
	const [tokenSymbol, setTokenSymbol] = useState("");
	const [transferedData, setTransferedData] = useState<any[]>([]);
	const [dataTransferedFromNow, setDataTransferedFromNow] = useState<any[]>([]);
	const [blockNumber, setBlockNumber] = useState(0);
	const [walletsBalance, setWalletsBalance] = useState<any[]>([]);
	const [contractList, setContractList] = useState<any>([]);
	const contract = useContract({
		addressOrName: process.env.NEXT_PUBLIC_CONTRACT_ADDRESS || "",
		contractInterface: rinkebyABI,
		signerOrProvider: provider,
	});
	const { data: ballanceList } = useContractReads({
		contracts: contractList,
		watch: true,
	});

	const getUserWalletBallance = async () => {
		const balance = await provider.getBalance(account);
		const walletBalance = await getAccountBallances(account, contract);

		setUserWalletBalance(ethers.utils.formatEther(balance));
		setWalletBalance(ethers.utils.formatEther(walletBalance));
	};

	// const getTransferdBlockData = async () => {
	// 	const blockCount = await getBlockNumber();
	// 	const data = await handlerTransferEventOnLast100Blocks(blockCount);
	// 	setTransferedData(data);
	// 	setBlockNumber(blockCount);
	// };

	// const onTransferHandler = (transferedData: any) => {
	// 	setDataTransferedFromNow((data) => data.concat(transferedData));
	// };

	const get10WalletBalances = async () => {
		ballanceList &&
			setWalletsBalance(
				ballanceList.map((balance, index) => {
					return {
						address: walletAddresses[index],
						balance: ethers.utils.formatEther(balance),
					};
				}),
			);
	};

	const getContractTokenSymbol = async () => {
		const symbol = await getTokenSymbol(contract);
		setTokenSymbol(symbol);
	};

	const onDepositHandler = async (amount: number) => {
		try {
			await depositETH(amount);
			await getUserWalletBallance();
		} catch (error: any) {
			console.log(error);
			alert(error.message);
		}
	};

	const onWithdrawHandler = async (amount: number) => {
		try {
			await withdrawETH(amount);
			await getUserWalletBallance();
		} catch (error: any) {
			console.log(error);
			alert(error.message);
		}
	};

	const onLogedInHandler = async (account: string) => {
		setAccount(account);
		try {
			getContractTokenSymbol();
			getUserWalletBallance();
			setContractList(walletContractList);
		} catch (error) {
			console.log(error);
		}
	};

	// useSubcribeTransferData(onTransferHandler, blockNumber);

	useEffect(() => {
		get10WalletBalances();
	}, [ballanceList]);

	return (
		<div className={styles.container}>
			<Head>
				<title>Create Next App</title>
				<meta name="description" content="Generated by create next app" />
				<link rel="icon" href="/favicon.ico" />
			</Head>
			<main className={styles.main}>
				<BrowserOnly>
					<Authentication onLoginSuccess={onLogedInHandler}>
						<div className={styles["account-info"]}>
							<p>Your account address: {account}</p>
							<p>Your ETH balance: {userWalletBalance} ETH</p>
							<p>
								Your WETH balance: {walletBalance} {tokenSymbol}
							</p>
							<p>
								Network:{" "}
								<span style={{ textTransform: "capitalize" }}>{chain?.name}</span>
							</p>
							<ExchangeInput isDeposit onSubmit={onDepositHandler} />
							<ExchangeInput onSubmit={onWithdrawHandler} />
						</div>
					</Authentication>
				</BrowserOnly>

				<h4 className={styles["section-title"]}>Transfer data on last 100 block:</h4>
				<TransferDataList data={transferedData} />
				<h4 className={styles["section-title"]}>Data get by listen to transfer event:</h4>
				<TransferDataList data={dataTransferedFromNow} />
				<h4 className={styles["section-title"]}>Balance of 10 wallet address:</h4>
				<WalletsBalance balances={walletsBalance} />
			</main>
		</div>
	);
};

export default Home;
